version: '3.8'

services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: temperaturecontrol-sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong@Passw0rd
      - MSSQL_PID=Developer
    ports:
      - "1433:1433"
    volumes:
      - sqlserver-data:/var/opt/mssql
    networks:
      - temperaturecontrol-network
    healthcheck:
      test: /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "YourStrong@Passw0rd" -C -Q "SELECT 1" || exit 1
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: temperaturecontrol-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - temperaturecontrol-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: temperaturecontrol-api
    ports:
      - "5000:5000"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=TemperatureControlDB;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=True;
      - ConnectionStrings__Redis=redis:6379
      - JWT__Secret=YourSuperSecretKeyForJWTTokenGenerationMinimum32Characters
      - JWT__Issuer=TemperatureControlAPI
      - JWT__Audience=TemperatureControlClient
      - JWT__ExpirationMinutes=60
      - CORS__AllowedOrigins__0=http://localhost:3000
      - CORS__AllowedOrigins__1=http://localhost:3001
      - CORS__AllowedOrigins__2=http://localhost:3002
      - CORS__AllowedOrigins__3=http://localhost:3003
      - CORS__AllowedOrigins__4=http://localhost:3004
      - CORS__AllowedOrigins__5=http://localhost:3005
      - CORS__AllowedOrigins__6=http://localhost:3006
      - CORS__AllowedOrigins__7=http://localhost:3007
      - CORS__AllowedOrigins__8=http://localhost:5173
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - temperaturecontrol-network
    restart: unless-stopped

volumes:
  sqlserver-data:
    driver: local
  redis-data:
    driver: local

networks:
  temperaturecontrol-network:
    driver: bridge
