version: '3.8'

services:
  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: temperaturecontrol-sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${SQL_SA_PASSWORD:-YourStrong@Passw0rd}
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - sqlserver-data:/var/opt/mssql
    networks:
      - temperature-network
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${SQL_SA_PASSWORD:-YourStrong@Passw0rd} -Q "SELECT 1"
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: temperaturecontrol-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - temperature-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: temperaturecontrol-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5000
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=TemperatureControlDB;User Id=sa;Password=${SQL_SA_PASSWORD:-YourStrong@Passw0rd};TrustServerCertificate=True;
      - ConnectionStrings__Redis=redis:6379
      - JWT__Secret=${JWT_SECRET:-CHANGE_THIS_SECRET_KEY_MIN_32_CHARS}
      - JWT__Issuer=TemperatureControlAPI
      - JWT__Audience=TemperatureControlClient
      - JWT__ExpirationMinutes=60
    ports:
      - "5000:5000"
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - temperature-network
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: temperaturecontrol-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:5000
      - NEXT_PUBLIC_SIGNALR_URL=http://localhost:5000/hubs
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - temperature-network

networks:
  temperature-network:
    driver: bridge

volumes:
  sqlserver-data:
  redis-data:
